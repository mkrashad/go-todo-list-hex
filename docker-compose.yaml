services: 
  app-api-gw:
    build:
      context: api-gw
      dockerfile: build/Dockerfile
    container_name: api-gw-golang-todo
    ports:
      - 8080:8080
  db-task: 
    image: postgres
    container_name: db-golang-todo-task
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      retries: 10
  # Containers for task microservice
  app-task: 
    build:
      context: task
      dockerfile: build/Dockerfile
    container_name: app-golang-todo-task
    ports:
      - 8081:8080
    environment:
      DB_USERNAME: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: db
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
    depends_on:
      db-task:
        condition: service_healthy

# Containers for user microservice
  db-user: 
    image: postgres
    container_name: db-golang-todo-user
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      retries: 10
  app-user: 
    build:
      context: user
      dockerfile: build/Dockerfile
    container_name: app-golang-todo-user
    ports:
      - 8082:8080
    environment:
      DB_USERNAME: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: db
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
    depends_on:
      db-user:
        condition: service_healthy
      
